#
# For a description of the syntax of this configuration file,
# see Documentation/kbuild/config-language.txt.
#

mainmenu "Linux/or32 Kernel Configuration"

config MMU
	bool
	default y

config SYMBOL_PREFIX
        string
        default ""

config ZONE_DMA
	bool
	default y

config HAVE_DMA_ATTRS
	bool
	default y

config UID16
	bool
	default y

config RWSEM_GENERIC_SPINLOCK
	bool
	default y

config GENERIC_CALIBRATE_DELAY
	bool
	default y

config GENERIC_HARDIRQS
        def_bool y

config GENERIC_IRQ_PROBE
        def_bool y

config GENERIC_HARDIRQS_NO__DO_IRQ
        def_bool y

config RWSEM_XCHGADD_ALGORITHM
	bool
	default n

config GENERIC_HWEIGHT
	bool
	default y

config FRAME_POINTER
       bool
       default y
 
config GENERIC_GPIO
	def_bool y

config GENERIC_TIME
	def_bool y

config GENERIC_CLOCKEVENTS
	def_bool y

config ARCH_USES_GETTIMEOFFSET
        def_bool y

config TRACE_IRQFLAGS_SUPPORT
        def_bool y

# For now, use generic checksum functions
#These can be reimplemented in assembly later if so inclined
config GENERIC_CSUM
        def_bool y

config GENERIC_FIND_NEXT_BIT
	def_bool y

source "init/Kconfig"

config OR32
	def_bool y
	select OF
	select OF_FLATTREE
	select HAVE_MEMBLOCK
	select ARCH_WANT_OPTIONAL_GPIOLIB

menu "Processor type and features"

choice 
	prompt "Subarchitecture/SoC type"
	default OR32_GENERIC

config OR32_GENERIC
	bool "or1200/Generic"
	help
	  Generic OpenRISC 1200 platform

endchoice


config OR32_SYS_CLK
	int "System clock frequency [MHz]"
	default 100

config OR32_MEMORY_SIZE
	hex "System memory size [hex, bytes]"
	default 01000000

config OR32_FLASH_BOOT
	bool "Boot from FLASH"
	default n
	help
	  This alows you have support for extreamly simple bootloader
          in the kernel. It will just copy kernel image from FLASH to RAM and
	  start executing it.

config HIGHMEM
        bool "High memory support"

source "kernel/time/Kconfig"
source kernel/Kconfig.hz
source kernel/Kconfig.preempt
source "mm/Kconfig"

config OR32_ITLB_ENTRIES
	int "Number of iTLB entries" if OR32_GENERIC
	default "64"

config OR32_DTLB_ENTRIES
	int "Number of dTLB entries" if OR32_GENERIC
	default "64"

config OR32_NO_SPR_SR_DSX
	bool "use SPR_SR_DSX software emulation" if OR32_GENERIC
	default y
	help
	  SPR_SR_DSX bit is status register bit indicating whether
	  the last exception has happened in delay slot.	

	  OpenRISC architecture makes it optional to have it implemented
 	  in hardware, and Marvin and Highland SoC do not have it.

	  Say N here if you know that your OpenRISC processor has
	  SPR_SR_DSX bit implemented. Say Y if you are unsure.


config OR32_ANONYMOUS
	bool "Enable anonymity"
	default n

menu "Debuging options"

config DEBUG_STACKOVERFLOW
	bool "Check for kernel stack overflow"
	default y
	help
	  Make extra checks for space avaliable on stack in some
          critical functions. This will cause kernel to run a bit slower,
	  but will catch most of kernel stack overruns and exit gracefuly.

	  Say Y if you are unsure. 

config OR32_GUARD_PROTECTED_CORE
	bool "Write protect read only part of kernel"
	default y
	help
	  Write to .text or .rodata sections is most probably kernel bug.
	  Enabling this will cause an oops at the instruction that tries to
	  corrupt kernel.
	
	  This has no performance implication but should help locating bugs.

	  Say Y if you are unsure.

config JUMP_UPON_UNHANDLED_EXCEPTION
	bool "Try to die gracefully"
	default y
	help
	  Now this puts kernel into infinite loop after first oops. Till
	  your kernel crashes this doesn't have any influence.

	  Say Y if you are unsure.

config OR32_EXCEPTION_DEBUG
	bool "Print processor state at each exception"
	default n
	help
	  This option will make your kernel unusable for all but kernel
	  debugging.

	  Say N if you are unsure.
	
config OR32_ESR_EXCEPTION_BUG_CHECK
	bool "Check for possible ESR exception bug"
	default n
	help
	  This option enables some checks that might expose some problems
          in kernel.

	  Say N if you are unsure.

endmenu

endmenu


menu "Bus options"

config PCI
	bool "PCI support"
	default n
	help
	  Find out whether your system includes a PCI bus. PCI is the name of
	  a bus system, i.e. the way the CPU talks to the other stuff inside
	  your box.  If you say Y here, the kernel will include drivers and
	  infrastructure code to support PCI bus devices.

config PCI_DOMAINS
	bool
	default PCI

source "drivers/pci/Kconfig"

source "drivers/pcmcia/Kconfig"

endmenu

menu "Executable file formats"

source "fs/Kconfig.binfmt"

endmenu

source "net/Kconfig"

source "drivers/Kconfig"

source "fs/Kconfig"

source "security/Kconfig"

source "crypto/Kconfig"

source "lib/Kconfig"

menu "Kernel hacking"

source "lib/Kconfig.debug"

endmenu
